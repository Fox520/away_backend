// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getFullUserStmt, err = db.PrepareContext(ctx, getFullUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetFullUser: %w", err)
	}
	if q.getMinimalUserStmt, err = db.PrepareContext(ctx, getMinimalUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetMinimalUser: %w", err)
	}
	if q.setBioStmt, err = db.PrepareContext(ctx, setBio); err != nil {
		return nil, fmt.Errorf("error preparing query SetBio: %w", err)
	}
	if q.setDeviceTokenStmt, err = db.PrepareContext(ctx, setDeviceToken); err != nil {
		return nil, fmt.Errorf("error preparing query SetDeviceToken: %w", err)
	}
	if q.setProfilePictureUrlStmt, err = db.PrepareContext(ctx, setProfilePictureUrl); err != nil {
		return nil, fmt.Errorf("error preparing query SetProfilePictureUrl: %w", err)
	}
	if q.setUsernameStmt, err = db.PrepareContext(ctx, setUsername); err != nil {
		return nil, fmt.Errorf("error preparing query SetUsername: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getFullUserStmt != nil {
		if cerr := q.getFullUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFullUserStmt: %w", cerr)
		}
	}
	if q.getMinimalUserStmt != nil {
		if cerr := q.getMinimalUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMinimalUserStmt: %w", cerr)
		}
	}
	if q.setBioStmt != nil {
		if cerr := q.setBioStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setBioStmt: %w", cerr)
		}
	}
	if q.setDeviceTokenStmt != nil {
		if cerr := q.setDeviceTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setDeviceTokenStmt: %w", cerr)
		}
	}
	if q.setProfilePictureUrlStmt != nil {
		if cerr := q.setProfilePictureUrlStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setProfilePictureUrlStmt: %w", cerr)
		}
	}
	if q.setUsernameStmt != nil {
		if cerr := q.setUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setUsernameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                       DBTX
	tx                       *sql.Tx
	createUserStmt           *sql.Stmt
	deleteUserStmt           *sql.Stmt
	getFullUserStmt          *sql.Stmt
	getMinimalUserStmt       *sql.Stmt
	setBioStmt               *sql.Stmt
	setDeviceTokenStmt       *sql.Stmt
	setProfilePictureUrlStmt *sql.Stmt
	setUsernameStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                       tx,
		tx:                       tx,
		createUserStmt:           q.createUserStmt,
		deleteUserStmt:           q.deleteUserStmt,
		getFullUserStmt:          q.getFullUserStmt,
		getMinimalUserStmt:       q.getMinimalUserStmt,
		setBioStmt:               q.setBioStmt,
		setDeviceTokenStmt:       q.setDeviceTokenStmt,
		setProfilePictureUrlStmt: q.setProfilePictureUrlStmt,
		setUsernameStmt:          q.setUsernameStmt,
	}
}
