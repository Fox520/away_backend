// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: updates.sql

package db

import (
	"context"
)

const setBio = `-- name: SetBio :one
update users
set bio = $2
where id = $1
returning id, username, email, device_token, bio, verified, s_status, profile_picture_url, createdat
`

type SetBioParams struct {
	ID  string `json:"id"`
	Bio string `json:"bio"`
}

func (q *Queries) SetBio(ctx context.Context, arg SetBioParams) (User, error) {
	row := q.queryRow(ctx, q.setBioStmt, setBio, arg.ID, arg.Bio)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DeviceToken,
		&i.Bio,
		&i.Verified,
		&i.SStatus,
		&i.ProfilePictureUrl,
		&i.Createdat,
	)
	return i, err
}

const setDeviceToken = `-- name: SetDeviceToken :one
update users
set device_token = $2
where id = $1
returning id, username, email, device_token, bio, verified, s_status, profile_picture_url, createdat
`

type SetDeviceTokenParams struct {
	ID          string `json:"id"`
	DeviceToken string `json:"device_token"`
}

func (q *Queries) SetDeviceToken(ctx context.Context, arg SetDeviceTokenParams) (User, error) {
	row := q.queryRow(ctx, q.setDeviceTokenStmt, setDeviceToken, arg.ID, arg.DeviceToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DeviceToken,
		&i.Bio,
		&i.Verified,
		&i.SStatus,
		&i.ProfilePictureUrl,
		&i.Createdat,
	)
	return i, err
}

const setProfilePictureUrl = `-- name: SetProfilePictureUrl :one
update users
set profile_picture_url = $2
where id = $1
returning id, username, email, device_token, bio, verified, s_status, profile_picture_url, createdat
`

type SetProfilePictureUrlParams struct {
	ID                string `json:"id"`
	ProfilePictureUrl string `json:"profile_picture_url"`
}

func (q *Queries) SetProfilePictureUrl(ctx context.Context, arg SetProfilePictureUrlParams) (User, error) {
	row := q.queryRow(ctx, q.setProfilePictureUrlStmt, setProfilePictureUrl, arg.ID, arg.ProfilePictureUrl)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DeviceToken,
		&i.Bio,
		&i.Verified,
		&i.SStatus,
		&i.ProfilePictureUrl,
		&i.Createdat,
	)
	return i, err
}

const setUsername = `-- name: SetUsername :one
update users
set username = $2
where id = $1
returning id, username, email, device_token, bio, verified, s_status, profile_picture_url, createdat
`

type SetUsernameParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) SetUsername(ctx context.Context, arg SetUsernameParams) (User, error) {
	row := q.queryRow(ctx, q.setUsernameStmt, setUsername, arg.ID, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DeviceToken,
		&i.Bio,
		&i.Verified,
		&i.SStatus,
		&i.ProfilePictureUrl,
		&i.Createdat,
	)
	return i, err
}
