// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	id, username, email, device_token, bio, verified, s_status, profile_picture_url
)
VALUES (
	$1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, username, email, device_token, bio, verified, s_status, profile_picture_url, createdat
`

type CreateUserParams struct {
	ID                string `json:"id"`
	Username          string `json:"username"`
	Email             string `json:"email"`
	DeviceToken       string `json:"device_token"`
	Bio               string `json:"bio"`
	Verified          bool   `json:"verified"`
	SStatus           string `json:"s_status"`
	ProfilePictureUrl string `json:"profile_picture_url"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.DeviceToken,
		arg.Bio,
		arg.Verified,
		arg.SStatus,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.DeviceToken,
		&i.Bio,
		&i.Verified,
		&i.SStatus,
		&i.ProfilePictureUrl,
		&i.Createdat,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getFullUser = `-- name: GetFullUser :one
SELECT
	users.id,
	users.username,
	users.email,
	users.bio,
	users.device_token,
	users.verified,
	users.s_status,
	users.createdat,
	users.profile_picture_url,
	subscription_status.s_description
FROM   users, subscription_status
WHERE  id = $1
	AND
		users.s_status = subscription_status.s_status
LIMIT 1
`

type GetFullUserRow struct {
	ID                string    `json:"id"`
	Username          string    `json:"username"`
	Email             string    `json:"email"`
	Bio               string    `json:"bio"`
	DeviceToken       string    `json:"device_token"`
	Verified          bool      `json:"verified"`
	SStatus           string    `json:"s_status"`
	Createdat         time.Time `json:"createdat"`
	ProfilePictureUrl string    `json:"profile_picture_url"`
	SDescription      string    `json:"s_description"`
}

func (q *Queries) GetFullUser(ctx context.Context, id string) (GetFullUserRow, error) {
	row := q.queryRow(ctx, q.getFullUserStmt, getFullUser, id)
	var i GetFullUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Bio,
		&i.DeviceToken,
		&i.Verified,
		&i.SStatus,
		&i.Createdat,
		&i.ProfilePictureUrl,
		&i.SDescription,
	)
	return i, err
}

const getMinimalUser = `-- name: GetMinimalUser :one
SELECT
	id,
	username,
	bio,
	verified,
	createdAt,
	profile_picture_url
FROM users
WHERE id = $1 LIMIT 1
`

type GetMinimalUserRow struct {
	ID                string    `json:"id"`
	Username          string    `json:"username"`
	Bio               string    `json:"bio"`
	Verified          bool      `json:"verified"`
	Createdat         time.Time `json:"createdat"`
	ProfilePictureUrl string    `json:"profile_picture_url"`
}

func (q *Queries) GetMinimalUser(ctx context.Context, id string) (GetMinimalUserRow, error) {
	row := q.queryRow(ctx, q.getMinimalUserStmt, getMinimalUser, id)
	var i GetMinimalUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Bio,
		&i.Verified,
		&i.Createdat,
		&i.ProfilePictureUrl,
	)
	return i, err
}
