// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createPropertyStmt, err = db.PrepareContext(ctx, createProperty); err != nil {
		return nil, fmt.Errorf("error preparing query CreateProperty: %w", err)
	}
	if q.createPropertyPhotoStmt, err = db.PrepareContext(ctx, createPropertyPhoto); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePropertyPhoto: %w", err)
	}
	if q.deletePropertyStmt, err = db.PrepareContext(ctx, deleteProperty); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteProperty: %w", err)
	}
	if q.getFeaturedAreasStmt, err = db.PrepareContext(ctx, getFeaturedAreas); err != nil {
		return nil, fmt.Errorf("error preparing query GetFeaturedAreas: %w", err)
	}
	if q.getIdsOfPropertiesByUserStmt, err = db.PrepareContext(ctx, getIdsOfPropertiesByUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetIdsOfPropertiesByUser: %w", err)
	}
	if q.getMinimalInfoPropertiesWithinRadiusStmt, err = db.PrepareContext(ctx, getMinimalInfoPropertiesWithinRadius); err != nil {
		return nil, fmt.Errorf("error preparing query GetMinimalInfoPropertiesWithinRadius: %w", err)
	}
	if q.getMinimalPropertiesStmt, err = db.PrepareContext(ctx, getMinimalProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetMinimalProperties: %w", err)
	}
	if q.getMinimalPropertyStmt, err = db.PrepareContext(ctx, getMinimalProperty); err != nil {
		return nil, fmt.Errorf("error preparing query GetMinimalProperty: %w", err)
	}
	if q.getPromotedPropertiesStmt, err = db.PrepareContext(ctx, getPromotedProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetPromotedProperties: %w", err)
	}
	if q.getPropertiesWithinRadiusStmt, err = db.PrepareContext(ctx, getPropertiesWithinRadius); err != nil {
		return nil, fmt.Errorf("error preparing query GetPropertiesWithinRadius: %w", err)
	}
	if q.getPropertyStmt, err = db.PrepareContext(ctx, getProperty); err != nil {
		return nil, fmt.Errorf("error preparing query GetProperty: %w", err)
	}
	if q.getPropertyPhotosStmt, err = db.PrepareContext(ctx, getPropertyPhotos); err != nil {
		return nil, fmt.Errorf("error preparing query GetPropertyPhotos: %w", err)
	}
	if q.getUserPropertiesStmt, err = db.PrepareContext(ctx, getUserProperties); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserProperties: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createPropertyStmt != nil {
		if cerr := q.createPropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPropertyStmt: %w", cerr)
		}
	}
	if q.createPropertyPhotoStmt != nil {
		if cerr := q.createPropertyPhotoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPropertyPhotoStmt: %w", cerr)
		}
	}
	if q.deletePropertyStmt != nil {
		if cerr := q.deletePropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePropertyStmt: %w", cerr)
		}
	}
	if q.getFeaturedAreasStmt != nil {
		if cerr := q.getFeaturedAreasStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFeaturedAreasStmt: %w", cerr)
		}
	}
	if q.getIdsOfPropertiesByUserStmt != nil {
		if cerr := q.getIdsOfPropertiesByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getIdsOfPropertiesByUserStmt: %w", cerr)
		}
	}
	if q.getMinimalInfoPropertiesWithinRadiusStmt != nil {
		if cerr := q.getMinimalInfoPropertiesWithinRadiusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMinimalInfoPropertiesWithinRadiusStmt: %w", cerr)
		}
	}
	if q.getMinimalPropertiesStmt != nil {
		if cerr := q.getMinimalPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMinimalPropertiesStmt: %w", cerr)
		}
	}
	if q.getMinimalPropertyStmt != nil {
		if cerr := q.getMinimalPropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMinimalPropertyStmt: %w", cerr)
		}
	}
	if q.getPromotedPropertiesStmt != nil {
		if cerr := q.getPromotedPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPromotedPropertiesStmt: %w", cerr)
		}
	}
	if q.getPropertiesWithinRadiusStmt != nil {
		if cerr := q.getPropertiesWithinRadiusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPropertiesWithinRadiusStmt: %w", cerr)
		}
	}
	if q.getPropertyStmt != nil {
		if cerr := q.getPropertyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPropertyStmt: %w", cerr)
		}
	}
	if q.getPropertyPhotosStmt != nil {
		if cerr := q.getPropertyPhotosStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPropertyPhotosStmt: %w", cerr)
		}
	}
	if q.getUserPropertiesStmt != nil {
		if cerr := q.getUserPropertiesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserPropertiesStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                       DBTX
	tx                                       *sql.Tx
	createPropertyStmt                       *sql.Stmt
	createPropertyPhotoStmt                  *sql.Stmt
	deletePropertyStmt                       *sql.Stmt
	getFeaturedAreasStmt                     *sql.Stmt
	getIdsOfPropertiesByUserStmt             *sql.Stmt
	getMinimalInfoPropertiesWithinRadiusStmt *sql.Stmt
	getMinimalPropertiesStmt                 *sql.Stmt
	getMinimalPropertyStmt                   *sql.Stmt
	getPromotedPropertiesStmt                *sql.Stmt
	getPropertiesWithinRadiusStmt            *sql.Stmt
	getPropertyStmt                          *sql.Stmt
	getPropertyPhotosStmt                    *sql.Stmt
	getUserPropertiesStmt                    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                       tx,
		tx:                                       tx,
		createPropertyStmt:                       q.createPropertyStmt,
		createPropertyPhotoStmt:                  q.createPropertyPhotoStmt,
		deletePropertyStmt:                       q.deletePropertyStmt,
		getFeaturedAreasStmt:                     q.getFeaturedAreasStmt,
		getIdsOfPropertiesByUserStmt:             q.getIdsOfPropertiesByUserStmt,
		getMinimalInfoPropertiesWithinRadiusStmt: q.getMinimalInfoPropertiesWithinRadiusStmt,
		getMinimalPropertiesStmt:                 q.getMinimalPropertiesStmt,
		getMinimalPropertyStmt:                   q.getMinimalPropertyStmt,
		getPromotedPropertiesStmt:                q.getPromotedPropertiesStmt,
		getPropertiesWithinRadiusStmt:            q.getPropertiesWithinRadiusStmt,
		getPropertyStmt:                          q.getPropertyStmt,
		getPropertyPhotosStmt:                    q.getPropertyPhotosStmt,
		getUserPropertiesStmt:                    q.getUserPropertiesStmt,
	}
}
