// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package property_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PropertyServiceClient is the client API for PropertyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyServiceClient interface {
	GetMinimalInfoProperties(ctx context.Context, in *GetMinimalPropertiesRequest, opts ...grpc.CallOption) (*GetMinimalPropertiesResponse, error)
	GetMinimalInfoPropertiesStream(ctx context.Context, opts ...grpc.CallOption) (PropertyService_GetMinimalInfoPropertiesStreamClient, error)
	GetSingleProperty(ctx context.Context, in *GetSinglePropertyRequest, opts ...grpc.CallOption) (*GetSinglePropertyResponse, error)
	GetUserProperties(ctx context.Context, in *GetUserPropertiesRequest, opts ...grpc.CallOption) (*GetUserPropertiesResponse, error)
	GetMultipleProperties(ctx context.Context, in *GetMultiplePropertyRequest, opts ...grpc.CallOption) (*GetMultiplePropertyResponse, error)
	CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*Property, error)
	UpdateProperty(ctx context.Context, in *Property, opts ...grpc.CallOption) (*Property, error)
	DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error)
	GetFeaturedAreas(ctx context.Context, in *FeaturedAreasRequest, opts ...grpc.CallOption) (*FeaturedAreasResponse, error)
	GetPromotedProperties(ctx context.Context, in *PromotedRequest, opts ...grpc.CallOption) (*PromotedResponse, error)
}

type propertyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyServiceClient(cc grpc.ClientConnInterface) PropertyServiceClient {
	return &propertyServiceClient{cc}
}

func (c *propertyServiceClient) GetMinimalInfoProperties(ctx context.Context, in *GetMinimalPropertiesRequest, opts ...grpc.CallOption) (*GetMinimalPropertiesResponse, error) {
	out := new(GetMinimalPropertiesResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/GetMinimalInfoProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetMinimalInfoPropertiesStream(ctx context.Context, opts ...grpc.CallOption) (PropertyService_GetMinimalInfoPropertiesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PropertyService_ServiceDesc.Streams[0], "/property.service.PropertyService/GetMinimalInfoPropertiesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &propertyServiceGetMinimalInfoPropertiesStreamClient{stream}
	return x, nil
}

type PropertyService_GetMinimalInfoPropertiesStreamClient interface {
	Send(*GetMinimalPropertiesRequest) error
	CloseAndRecv() (*GetMinimalPropertiesResponse, error)
	grpc.ClientStream
}

type propertyServiceGetMinimalInfoPropertiesStreamClient struct {
	grpc.ClientStream
}

func (x *propertyServiceGetMinimalInfoPropertiesStreamClient) Send(m *GetMinimalPropertiesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *propertyServiceGetMinimalInfoPropertiesStreamClient) CloseAndRecv() (*GetMinimalPropertiesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetMinimalPropertiesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *propertyServiceClient) GetSingleProperty(ctx context.Context, in *GetSinglePropertyRequest, opts ...grpc.CallOption) (*GetSinglePropertyResponse, error) {
	out := new(GetSinglePropertyResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/GetSingleProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetUserProperties(ctx context.Context, in *GetUserPropertiesRequest, opts ...grpc.CallOption) (*GetUserPropertiesResponse, error) {
	out := new(GetUserPropertiesResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/GetUserProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetMultipleProperties(ctx context.Context, in *GetMultiplePropertyRequest, opts ...grpc.CallOption) (*GetMultiplePropertyResponse, error) {
	out := new(GetMultiplePropertyResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/GetMultipleProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) CreateProperty(ctx context.Context, in *CreatePropertyRequest, opts ...grpc.CallOption) (*Property, error) {
	out := new(Property)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/CreateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) UpdateProperty(ctx context.Context, in *Property, opts ...grpc.CallOption) (*Property, error) {
	out := new(Property)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/UpdateProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) DeleteProperty(ctx context.Context, in *DeletePropertyRequest, opts ...grpc.CallOption) (*DeletePropertyResponse, error) {
	out := new(DeletePropertyResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/DeleteProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetFeaturedAreas(ctx context.Context, in *FeaturedAreasRequest, opts ...grpc.CallOption) (*FeaturedAreasResponse, error) {
	out := new(FeaturedAreasResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/GetFeaturedAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyServiceClient) GetPromotedProperties(ctx context.Context, in *PromotedRequest, opts ...grpc.CallOption) (*PromotedResponse, error) {
	out := new(PromotedResponse)
	err := c.cc.Invoke(ctx, "/property.service.PropertyService/GetPromotedProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServiceServer is the server API for PropertyService service.
// All implementations must embed UnimplementedPropertyServiceServer
// for forward compatibility
type PropertyServiceServer interface {
	GetMinimalInfoProperties(context.Context, *GetMinimalPropertiesRequest) (*GetMinimalPropertiesResponse, error)
	GetMinimalInfoPropertiesStream(PropertyService_GetMinimalInfoPropertiesStreamServer) error
	GetSingleProperty(context.Context, *GetSinglePropertyRequest) (*GetSinglePropertyResponse, error)
	GetUserProperties(context.Context, *GetUserPropertiesRequest) (*GetUserPropertiesResponse, error)
	GetMultipleProperties(context.Context, *GetMultiplePropertyRequest) (*GetMultiplePropertyResponse, error)
	CreateProperty(context.Context, *CreatePropertyRequest) (*Property, error)
	UpdateProperty(context.Context, *Property) (*Property, error)
	DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error)
	GetFeaturedAreas(context.Context, *FeaturedAreasRequest) (*FeaturedAreasResponse, error)
	GetPromotedProperties(context.Context, *PromotedRequest) (*PromotedResponse, error)
	mustEmbedUnimplementedPropertyServiceServer()
}

// UnimplementedPropertyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyServiceServer struct {
}

func (UnimplementedPropertyServiceServer) GetMinimalInfoProperties(context.Context, *GetMinimalPropertiesRequest) (*GetMinimalPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMinimalInfoProperties not implemented")
}
func (UnimplementedPropertyServiceServer) GetMinimalInfoPropertiesStream(PropertyService_GetMinimalInfoPropertiesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMinimalInfoPropertiesStream not implemented")
}
func (UnimplementedPropertyServiceServer) GetSingleProperty(context.Context, *GetSinglePropertyRequest) (*GetSinglePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleProperty not implemented")
}
func (UnimplementedPropertyServiceServer) GetUserProperties(context.Context, *GetUserPropertiesRequest) (*GetUserPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProperties not implemented")
}
func (UnimplementedPropertyServiceServer) GetMultipleProperties(context.Context, *GetMultiplePropertyRequest) (*GetMultiplePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipleProperties not implemented")
}
func (UnimplementedPropertyServiceServer) CreateProperty(context.Context, *CreatePropertyRequest) (*Property, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProperty not implemented")
}
func (UnimplementedPropertyServiceServer) UpdateProperty(context.Context, *Property) (*Property, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProperty not implemented")
}
func (UnimplementedPropertyServiceServer) DeleteProperty(context.Context, *DeletePropertyRequest) (*DeletePropertyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProperty not implemented")
}
func (UnimplementedPropertyServiceServer) GetFeaturedAreas(context.Context, *FeaturedAreasRequest) (*FeaturedAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeaturedAreas not implemented")
}
func (UnimplementedPropertyServiceServer) GetPromotedProperties(context.Context, *PromotedRequest) (*PromotedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPromotedProperties not implemented")
}
func (UnimplementedPropertyServiceServer) mustEmbedUnimplementedPropertyServiceServer() {}

// UnsafePropertyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServiceServer will
// result in compilation errors.
type UnsafePropertyServiceServer interface {
	mustEmbedUnimplementedPropertyServiceServer()
}

func RegisterPropertyServiceServer(s grpc.ServiceRegistrar, srv PropertyServiceServer) {
	s.RegisterService(&PropertyService_ServiceDesc, srv)
}

func _PropertyService_GetMinimalInfoProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMinimalPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetMinimalInfoProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/GetMinimalInfoProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetMinimalInfoProperties(ctx, req.(*GetMinimalPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetMinimalInfoPropertiesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PropertyServiceServer).GetMinimalInfoPropertiesStream(&propertyServiceGetMinimalInfoPropertiesStreamServer{stream})
}

type PropertyService_GetMinimalInfoPropertiesStreamServer interface {
	SendAndClose(*GetMinimalPropertiesResponse) error
	Recv() (*GetMinimalPropertiesRequest, error)
	grpc.ServerStream
}

type propertyServiceGetMinimalInfoPropertiesStreamServer struct {
	grpc.ServerStream
}

func (x *propertyServiceGetMinimalInfoPropertiesStreamServer) SendAndClose(m *GetMinimalPropertiesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *propertyServiceGetMinimalInfoPropertiesStreamServer) Recv() (*GetMinimalPropertiesRequest, error) {
	m := new(GetMinimalPropertiesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PropertyService_GetSingleProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSinglePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetSingleProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/GetSingleProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetSingleProperty(ctx, req.(*GetSinglePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetUserProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetUserProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/GetUserProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetUserProperties(ctx, req.(*GetUserPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetMultipleProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiplePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetMultipleProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/GetMultipleProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetMultipleProperties(ctx, req.(*GetMultiplePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_CreateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).CreateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/CreateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).CreateProperty(ctx, req.(*CreatePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_UpdateProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Property)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).UpdateProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/UpdateProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).UpdateProperty(ctx, req.(*Property))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_DeleteProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/DeleteProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).DeleteProperty(ctx, req.(*DeletePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetFeaturedAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeaturedAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetFeaturedAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/GetFeaturedAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetFeaturedAreas(ctx, req.(*FeaturedAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropertyService_GetPromotedProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromotedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServiceServer).GetPromotedProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property.service.PropertyService/GetPromotedProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServiceServer).GetPromotedProperties(ctx, req.(*PromotedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PropertyService_ServiceDesc is the grpc.ServiceDesc for PropertyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PropertyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "property.service.PropertyService",
	HandlerType: (*PropertyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMinimalInfoProperties",
			Handler:    _PropertyService_GetMinimalInfoProperties_Handler,
		},
		{
			MethodName: "GetSingleProperty",
			Handler:    _PropertyService_GetSingleProperty_Handler,
		},
		{
			MethodName: "GetUserProperties",
			Handler:    _PropertyService_GetUserProperties_Handler,
		},
		{
			MethodName: "GetMultipleProperties",
			Handler:    _PropertyService_GetMultipleProperties_Handler,
		},
		{
			MethodName: "CreateProperty",
			Handler:    _PropertyService_CreateProperty_Handler,
		},
		{
			MethodName: "UpdateProperty",
			Handler:    _PropertyService_UpdateProperty_Handler,
		},
		{
			MethodName: "DeleteProperty",
			Handler:    _PropertyService_DeleteProperty_Handler,
		},
		{
			MethodName: "GetFeaturedAreas",
			Handler:    _PropertyService_GetFeaturedAreas_Handler,
		},
		{
			MethodName: "GetPromotedProperties",
			Handler:    _PropertyService_GetPromotedProperties_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMinimalInfoPropertiesStream",
			Handler:       _PropertyService_GetMinimalInfoPropertiesStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "protos/property_service.proto",
}
